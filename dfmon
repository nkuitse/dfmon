#!/bin/zsh -e

typeset host=$(hostname -s); host=$host:l
typeset var=/var/local/dfmon/$host
typeset timestamp=$(print -P '%D{%Y%m%dT%H%M%S}')
typeset used mount
typeset all=false last=false reset=false verbose=false

main() {
    typeset trend opt t
    integer err=0
    typeset -a thresholds
    while getopts :alrvV opt; do
        case $opt in
            (a) all=true ;;
            (l) last=true ;;
            (r) reset=true ;;
            (v) verbose=true ;;
            (V) show-version ;;
        esac
    done
    if $last; then
        print '+/- %Now %Prv Mountpoint' >&2
    fi
    df-summary | while read -r used mount; do
        mkdir -p $var$mount
        cd $var$mount 
        [[ ! -e dfmon.conf/skip ]] || continue
        cur=${used[1,-2]}
        if [[ ! -e dfmon.log ]]; then
            ! $verbose || print "$host: disk usage on $mount is now being monitored: currently $used used" >&2
            $last || print $timestamp $cur >> dfmon.log
            continue
        fi
        prev=$(tail -n1 < dfmon.log | awk '{ print $2 }')
        if $last; then
            if (( cur > prev )); then
                trend='+'$( printf '%2d' $(( cur - prev )) )
            elif (( prev > cur )); then
                trend='-'$( printf '%2d' $(( prev - cur )) )
            fi
            printf '%-3.3s %4d %4d %s\n' "$trend" $cur $prev $mount >&2
            continue
        fi
        print $timestamp $cur >> dfmon.log
        if $reset; then
            ! $verbose || print "$host: resetting baseline on $mount" >&2
        elif [[ -z $prev ]]; then
            ! $verbose || print "$host: setting baseline on $mount" >&2
        else
            thresholds=()
            [[ ! -e dfmon.conf/threshold.percent  ]] || thresholds+=$(cat dfmon.conf/threshold.percent)
            [[ ! -e dfmon.conf/threshold.increase ]] || thresholds+=$(( prev + $(cat dfmon.conf/threshold.increase) ))
            (( $#thresholds > 0 )) || thresholds+=$(( prev + 1 ))
            for t in ${(on)thresholds}; do
                if (( cur > t )); then
                    print "$host: disk usage on $mount exceeds $t% threshold (was $prev% now $cur% used)"
                    err=2
                    break
                fi
            done
        fi
    done
    exit $err
}

df-summary() {
    if $all; then
        df -lP | awk '/ \// { print $5, $6 }'
    else
        df -lP | awk '/^\// { print $5, $6 }' 
    fi
}

show-version() {
    cat <<EOS
dfmon __VERSION__ by __AUTHOR__
__COPYRIGHT__
Licensed under the terms of the GNU General Public License, version 2.
See LICENSE for details.
EOS
    exit 0
}

main "$@"
