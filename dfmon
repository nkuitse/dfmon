#!/bin/zsh -e

typeset host=$(hostname -s); host=$host:l
typeset var=/var/local/dfmon/$host
typeset timestamp=$(print -P '%D{%Y%m%dT%H%M%S}')
typeset all=false last=false reset=false verbose=false nowrite=false showhost=false
typeset -a action thresholds
typeset trend opt t
integer err=0

main() {
    typeset -a action
    action=( list )
    while getopts :arvnhcVp:i: opt; do
        case $opt in
            (a) all=true ;;
            (r) reset=true ;;
            (v) verbose=true ;;
            (n) nowrite=true ;;
            (h) showhost=true ;;
            (c) action=( checkpoint ) ;;
            (V) action=( show-version ) ;;
            (p) action=( set-percent-threshold $OPTARG ) ;;
            (i) action=( set-increase-threshold $OPTARG ) ;;
            (*) usage ;;
        esac
    done
    shift $(( OPTIND - 1 ))
    set -- $action $@
    typeset func=$1; shift
    $func $@
}

checkpoint() {
    typeset cap used mount
    integer prev cur inc pct chg
    df-summary | while read -r cap used mount; do
        $nowrite || mkdir -p $var$mount
        cd $var$mount
        [[ ! -e dfmon.conf/skip ]] || continue
        cur=${used[1,-2]}
        if [[ ! -e dfmon.log ]]; then
            ! $verbose || print "$host: disk usage on $mount is now being monitored: currently $used used" >&2
            $last || $nowrite || print $timestamp $cur >> dfmon.log
            continue
        fi
        prev=$(tail -n1 < dfmon.log | awk '{ print $2 }')
        $nowrite || print $timestamp $cur >> dfmon.log
        if $reset; then
            ! $verbose || print "$host: resetting baseline on $mount" >&2
        elif [[ -z $prev ]]; then
            ! $verbose || print "$host: setting baseline on $mount" >&2
        else
            thresholds=()
            [[ ! -e dfmon.conf/threshold.percent  ]] || thresholds+=$(cat dfmon.conf/threshold.percent)
            [[ ! -e dfmon.conf/threshold.increase ]] || thresholds+=$(( prev + $(cat dfmon.conf/threshold.increase) ))
            (( $#thresholds > 0 )) || thresholds+=$(( prev + 1 ))
            for t in ${(on)thresholds}; do
                if (( cur > t )); then
                    print "$host: disk usage on $mount exceeds $t% threshold (was $prev% now $cur% used)"
                    err=2
                    break
                fi
            done
        fi
    done
    exit $err
}

list() {
    if $verbose; then
        print -- 'Chg /Thr ( Prv ) Now /Thr  Size  Stat  Mount point'
        print -- '---  --- ------- ---  ---  ----  ----  ------------------------'
    fi
    typeset stat pfx sfx=$'\e[0m'
    typeset cap used mount
    df-summary | while read -r cap used mount; do
        cd $var$mount || continue
        [[ ! -e dfmon.conf/skip ]] || continue
        prev=$( [[ ! -e dfmon.log ]] || tail -n1 < dfmon.log | awk '{ print $2 }' )
        cur=${used[1,-2]}
        pct=100; inc=2; chg=$(( cur - prev ))
        [[ ! -e dfmon.conf/threshold.percent ]]  || pct=$(cat dfmon.conf/threshold.percent)
        [[ ! -e dfmon.conf/threshold.increase ]] || inc=$(cat dfmon.conf/threshold.increase)
        stat=' ok '
        if (( cur > pct || chg > inc )); then
            stat=WARN
            err=2
            [[ ! -t 1 ]] || pfx=$'\e[31;1m'
        else
            pfx=''
        fi
        ! $showhost || mount=${host}:$mount
        if $verbose; then
            printf $pfx'%3d /%3d ( %3d ) %3d /%3d  %4.4s  %-4.4s  %s'$sfx'\n' $chg $inc $prev $cur $pct $(pretty-capacity $cap) $stat $mount
        else
            printf $pfx'%d/%d %s %s'$sfx'\n' $cur $pct $stat $mount
            # printf '%4s %7s %9s %s\n' $prev $trend/$inc $cur/$pct $mount
            # printf '%-3.3s %4d %4d %s\n' "$trend" $cur $prev $stat $mount >&2
        fi
    done
    exit $err
}

df-summary() {
    if $all; then
        df -klP | awk '/ \// { print $2, $5, $6 }'
    else
        df -klP | awk '/^\// { print $2, $5, $6 }'
    fi
}

pretty-capacity() {
    typeset cap=$1
    if (( cap >= 2 ** 30 )); then
        units=T
        (( cap = (cap+0.0) / 2 ** 30 ))
    elif (( cap >= 2 ** 20 )); then
        units=G
        (( cap = (cap+0.0) / 2 ** 20 ))
    elif (( cap >= 2 ** 10 )); then
        units=M
        (( cap = (cap+0.0) / 2 ** 10 ))
    else
        units=K
    fi
    # print DEBUG $cap $units >&2
    if (( cap >= 10 )); then
        printf '%3d%s\n' $cap $units
    else
        printf '%1.1f%s\n' $cap $units
    fi
}

usage() {
    print 'usage: dfmon [-a] [-r] [-v] [-l] [-V] [-p PCT] [-i PCT] [MOUNTPOINT]' >&2
    for msg in $@; do
        print "$msg"
    done >&2
    exit 1
}

show-version() {
    cat <<EOS
dfmon __VERSION__ by __AUTHOR__
__COPYRIGHT__
Licensed under the terms of the GNU General Public License, version 2.
See LICENSE for details.
EOS
}

set-percent-threshold() {
    integer p=$1
    typeset m=$2
    (( p >= 0 && p <= 100 )) || usage 'Percent must be between 0 and 100'
    [[ -n $m ]] || usage 'You must specify a mount point'
    mkdir -p $var$m/dfmon.conf
    print $p > $var$m/dfmon.conf/threshold.percent
}

set-increase-threshold() {
    integer i=$1
    typeset m=$2
    (( i >= 1 && i <= 100 )) || usage 'Increase must be between 1 and 100'
    [[ -n $m ]] || usage 'You must specify a mount point'
    mkdir -p $var$m/dfmon.conf
    print $i > $var$m/dfmon.conf/threshold.increase
}

main "$@"
